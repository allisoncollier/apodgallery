{"version":3,"sources":["APODCard.js","AstroInfo.js","APODHeading.js","App.js","serviceWorker.js","index.js"],"names":["APODCard","props","className","style","padding","id","backgroundColor","borderColor","onClick","getAPOD","AstroInfo","astros","map","indvAstro","key","title","minwidth","media_type","src","url","alt","date","APODHeading","borderBottom","API_KEY","astroObjArr","months31","App","isLeapYear","givenYear","state","astroInfo","a","dayCounter","astroYear","astroMonth","astroDay","currentDate","dateArr","fetch","api_call","json","data","split","parseInt","includes","push","console","log","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gRAiBeA,G,MAVE,SAAAC,GAAK,OAClB,yBAAKC,UAAU,YAAYC,MAAO,CAACC,QAAS,SACxC,yBAAKF,UAAU,8BACX,yBAAKA,UAAU,qBACX,4BAAQG,GAAG,aAAaH,UAAU,yBAAyBC,MAAO,CAACG,gBAAiB,UAAYC,YAAa,WAAWC,QAASP,EAAMQ,SAAvI,qBCuBDC,EAhCG,SAAAT,GAAK,OACnB,yBAAKC,UAAU,aACf,yBAAKA,UAAU,gCACVD,EAAMU,OAAOC,KAAI,SAACC,GACnB,OACA,yBAAKX,UAAU,qBAAqBY,IAAKD,EAAUE,OAC/C,yBAAKb,UAAU,OAAOC,MAAO,CAACa,SAAU,UAGH,UAAzBH,EAAUI,WACN,yBAAKf,UAAU,0CACf,4BAAQA,UAAU,wBAAwBa,MAAOF,EAAUE,MAAOG,IAAKL,EAAUM,OAGvD,UAAzBN,EAAUI,WACP,yBAAKC,IAAKL,EAAUM,IAAKjB,UAAU,eAAekB,IAAI,aAD7D,EAMT,yBAAKlB,UAAU,aACX,wBAAIA,UAAU,cAAcW,EAAUE,OACtC,uBAAGb,UAAU,aAAb,gBAAuCW,EAAUQ,eCZtDC,EARK,WAChB,OACA,yBAAKpB,UAAU,kBAAkBC,MAAO,CAACC,QAAS,EAAGmB,aAAc,uBAC/D,yBAAKL,IALK,qBAKWhB,UAAU,YAAYkB,IAAI,UCDjDI,EAAU,2CACZC,EAAc,GAEZC,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IA8FtBC,E,4MA3FbC,WAAa,SAACC,GACZ,GAAIA,EAAY,IAAM,EAAG,CACvB,GAAIA,EAAY,MAAQ,EACtB,OAAO,EACF,GAAIA,EAAY,IACrB,OAAO,EAGX,OAAO,G,EAGTC,MAAQ,CACNC,UAAW,I,EAEbtB,Q,sBAAU,0CAAAuB,EAAA,6DACJC,EAnBU,GAoBVC,EAAY,KACZC,EAAa,KACbC,EAAW,KACXC,EAAc,GACdC,EAAU,GANN,SAQaC,MAAM,+CAAD,OAAgDf,IARlE,OAQJgB,EARI,mBASDP,EAAa,GATZ,kCAUaO,EAASC,OAVtB,eAUAC,EAVA,OAlBM,KA8BRT,IAEFI,EAAcK,EAAKrB,KAEnBiB,EAAUD,EAAYM,MAAM,KAE5BT,EAAYU,SAASN,EAAQ,IAC7BH,EAAaS,SAASN,EAAQ,IAC9BF,EAAWQ,SAASN,EAAQ,KASb,IAAbF,GAEiB,IAAfD,GACFA,EAAa,GACbD,KAEAC,IAKAC,EADEV,EAASmB,SAASV,GACT,GAGU,IAAfA,GAAoB,EAAKP,WAAWM,GAC3B,GAEW,IAAfC,EACI,GAEA,IAIjBC,IAGFX,EAAYqB,KAAKJ,GAxDX,UAyDWH,MAAM,+CAAD,OAAgDf,EAAhD,iBAAgEU,EAAhE,YAA6EC,EAA7E,YAA2FC,IAzD3G,QAyDNI,EAzDM,OA0DNP,IA1DM,uBA4DRc,QAAQC,IAAIvB,GACZ,EAAKwB,SAAS,CAAClB,UAAWN,IA7DlB,4C,uDAkER,OACE,yBAAKpB,GAAG,WACN,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAUI,QAASyC,KAAKzC,UACxB,kBAAC,EAAD,CAAWE,OAAQuC,KAAKpB,MAAMC,iB,GAtFpBoB,a,MCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.0ee992e9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/*const buttonClick = (props, bttn) => {\r\n    props.getAPOD;\r\n    //bttn.\r\n}*/\r\n\r\nconst APODCard = props => (\r\n    <div className=\"container\" style={{padding: '3rem'}}>\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col-6 text-center\">\r\n                <button id='btnAnimate' className=\"btn btn-primary btn-lg\" style={{backgroundColor: '#02169c',  borderColor: '#02169c'}}onClick={props.getAPOD}>Load Gallery</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default APODCard;","import React from 'react';\r\n\r\nconst AstroInfo = props => (\r\n    <div className=\"container\">\r\n    <div className=\"row row-cols-1 row-cols-md-3\">\r\n        {props.astros.map((indvAstro) => {\r\n        return (\r\n        <div className=\"col-md-4 mt-4 mb-4\" key={indvAstro.title}>\r\n            <div className=\"card\" style={{minwidth: '18rem'}}>\r\n                \r\n                {(() => { \r\n                    if (indvAstro.media_type === \"video\") {\r\n                    return (<div className=\"embed-responsive embed-responsive-4by3\">\r\n                            <iframe className=\"embed-responsive-item\" title={indvAstro.title} src={indvAstro.url}></iframe>\r\n                            </div>)\r\n                    }\r\n                    else if (indvAstro.media_type === \"image\") {\r\n                        return (<img src={indvAstro.url} className=\"card-img-top\" alt=\"...\"/>)\r\n                    }\r\n                })()}\r\n                \r\n                \r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{indvAstro.title}</h5>\r\n                    <p className=\"card-text\">Date Posted: {indvAstro.date}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n      })}\r\n    </div>\r\n    </div>\r\n);\r\n\r\nexport default AstroInfo;","import React from 'react';\r\n\r\nconst headerImg = './header_image.png';\r\n\r\nconst APODHeading = () => {\r\n    return (\r\n    <div className=\"container-fluid\" style={{padding: 0, borderBottom: '1rem solid #c897bf'}}>\r\n        <img src={headerImg} className=\"img-fluid\" alt=\"...\"/>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default APODHeading;","import React, { Component } from 'react';\nimport './App.css';\nimport APODCard from './APODCard';\nimport AstroInfo from './AstroInfo';\nimport APODHeading from './APODHeading';\n\nconst API_KEY = \"ZycdMl8Qjd3c5c7HAn9TDHe7cke9lMbl27JDPeT0\";\nlet astroObjArr = [];\nconst numOfDays = 30;\nconst months31 = [1, 3, 5, 7, 8, 10, 12]\n\nclass App extends Component {\n  isLeapYear = (givenYear) => {\n    if (givenYear % 4 === 0) {\n      if (givenYear % 100 === 0) {\n        return false;\n      } else if (givenYear % 400) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  state = {\n    astroInfo: []\n  }\n  getAPOD = async () => {\n    let dayCounter = numOfDays;\n    let astroYear = \"00\"\n    let astroMonth = \"00\"\n    let astroDay = \"00\"\n    let currentDate = \"\"\n    let dateArr = []\n\n    let api_call = await fetch(`https://api.nasa.gov/planetary/apod?api_key=${API_KEY}`);\n    while (dayCounter > 0) {\n      const data = await api_call.json();\n      //set the date variables\n      if (dayCounter === numOfDays) {\n        //get date string\n        currentDate = data.date;\n        //parse month day and year out of date string\n        dateArr = currentDate.split(\"-\");\n        //set to respective variables\n        astroYear = parseInt(dateArr[0])\n        astroMonth = parseInt(dateArr[1])\n        astroDay = parseInt(dateArr[2])\n\n        //or if api is giving 404 for today...\n        //astroYear = 2020\n        //astroMonth = 8\n        //astroDay = 31\n      }\n      //handle decrementing day and or month and or year\n      //if day == 1, decrement month\n      if (astroDay === 1) {\n        //if month == 1, decrement year and set month to 12\n        if (astroMonth === 1) {\n          astroMonth = 12;\n          astroYear--;\n        } else {\n          astroMonth--\n        }\n\n        //set days\n        if (months31.includes(astroMonth)) {\n          astroDay = 31\n        } else {\n            //if month == 2 and leap year, set days to 28\n            if (astroMonth === 2 && this.isLeapYear(astroYear)) {\n              astroDay = 28\n            } //if month == 2 and not leap year, set days to 29\n            else if (astroMonth === 2) {\n              astroDay = 29\n            } else {\n              astroDay = 30\n            }\n        }\n      } else {\n        astroDay--\n      }\n\n      astroObjArr.push(data);\n      api_call = await fetch(`https://api.nasa.gov/planetary/apod?api_key=${API_KEY}&date=${astroYear}-${astroMonth}-${astroDay}`);\n      dayCounter--;\n    }\n    console.log(astroObjArr);\n    this.setState({astroInfo: astroObjArr});\n  }\n\n  render() {\n    \n    return (\n      <div id=\"mainDiv\">\n        <APODHeading />\n        \n        <APODCard getAPOD={this.getAPOD}/>\n        <AstroInfo astros={this.state.astroInfo}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}